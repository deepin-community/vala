/* basic_types_string_relation.c generated by valac, the Vala compiler
 * generated from basic_types_string_relation.vala, do not modify */

#include <glib.h>

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	_vala_assert (g_strcmp0 ("a", "a") == 0, "\"a\" == \"a\"");
	_vala_assert (g_strcmp0 ("a", "b") != 0, "\"a\" != \"b\"");
	_vala_assert (g_strcmp0 ("a", "b") < 0, "\"a\" < \"b\"");
	_vala_assert (g_strcmp0 ("b", "a") > 0, "\"b\" > \"a\"");
	_vala_assert (g_strcmp0 ("a", "a") >= 0, "\"a\" >= \"a\"");
	_vala_assert (g_strcmp0 ("b", "a") >= 0, "\"b\" >= \"a\"");
	_vala_assert (g_strcmp0 ("b", "b") <= 0, "\"b\" <= \"b\"");
	_vala_assert (g_strcmp0 ("a", "b") <= 0, "\"a\" <= \"b\"");
	_vala_assert (g_strcmp0 (NULL, "a") < 0, "null < \"a\"");
	_vala_assert (g_strcmp0 ("a", NULL) > 0, "\"a\" > null");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

